#!/usr/bin/env bash
set -euo pipefail

# ------------------------------------------------------------------------------
# Exit Codes
# ------------------------------------------------------------------------------
declare -r EXIT_OK=0

declare -r EXIT_BASE=64
declare -r EXIT_BASH_TOO_OLD=$((EXIT_BASE + 0))
declare -r EXIT_USAGE=$((EXIT_BASE + 1))
declare -r EXIT_EXISTS=$((EXIT_BASE + 2))

declare -r TRUE=0
declare -r FALSE=1

# ------------------------------------------------------------------------------
# Globals
# ------------------------------------------------------------------------------
# TODO: 32-bit interpreter?
declare g_interpreter=/lib64/ld-linux-x86-64.so.2
# TODO: custom store path
declare g_store_path=/nix/store
declare g_package=${1:-}
declare g_result_name=${2:-}
declare g_result_path=
declare -a g_dependency_list=()
declare -a g_dependency_skip_list=(glibc gcc alsa-lib freetype bash)
declare -A g_dependency_map=()
declare -A g_so_location_cache=()
declare g_build_dir=

# ------------------------------------------------------------------------------
# Main
# ------------------------------------------------------------------------------
main() {
  check_bash_version
  check_usage

  g_build_dir=$(mktemp -d --tmpdir etwas-XXXX)
  trap unmain EXIT

  printf "Constructing a denixified version of the package at %s using temporary dir %s\n" "${g_package}" "${g_build_dir}"

  recurse_dependency "${g_package}"

  mv "${g_build_dir}" "${g_result_path}"
}

unmain() {
  if [[ -d "${g_build_dir}" ]]
  then
    rm --preserve-root -rf "${g_build_dir}"
    return
  fi
}

# ------------------------------------------------------------------------------
# Implementation
# ------------------------------------------------------------------------------
build_dependencies() {
  local -r package=${1}

  while IFS= read -r reference
  do
    recurse_dependency "${reference}"
  done < <(nix-store --query --references "${package}")
}

recurse_dependency() {
  local -r dependency=${1}

  if has_dependency_been_processed "${dependency}"
  then
    return
  fi

  # We do this here to prevent excessive logging of skipped
  # dependencies
  mark_dependency_as_processed "${dependency}"

  local dependency_name=
  dependency_name=$(dependency_name "${dependency}")

  if should_skip_dependency "${dependency_name}"
  then
    printf "Skipping ignored dependency %s\n" "${dependency}"
    return
  fi

  # Depth first so that the .so location
  # cache is ready for us to use when
  # we patch binaries
  build_dependencies "${dependency}"

  process_dependency "${dependency}"
}

has_dependency_been_processed() {
  local -r dependency=${1}
  [[ -v g_dependency_map[${dependency}] ]]
}

mark_dependency_as_processed() {
  local -r dependency=${1}

  g_dependency_list+=("${dependency}")

  # NOTE: shellcheck can't detect that we're using
  # the variable, hence the following ignore directive.
  #
  # shellcheck disable=SC2034
  g_dependency_map["${dependency}"]=true
}

should_skip_dependency() {
  local -r dependency_name=${1}

  for skip in "${g_dependency_skip_list[@]}"
  do
    if [[ "${dependency_name}" == "${skip}-"* ]]
    then
      return ${TRUE}
    fi
  done

  return ${FALSE}
}

process_dependency() {
  local -r dependency=${1}

  printf "Processing %s\n" "${dependency}"

  local dependency_name=
  dependency_name=$(dependency_name "${dependency}")

  local -r dependency_dir=${g_build_dir}/lib/${dependency_name}
  mkdir -p "${dependency_dir}"

  cp \
    --recursive \
    --dereference \
    --preserve=mode,ownership,timestamps \
    "${dependency}/"* \
    --target-directory="${dependency_dir}"

  # Cache the locations of .so files before patching
  add_so_files_to_cache "${dependency_dir}"

  # Files in the nix store are immutable by default, so we need
  # to make them writable before patching
  chmod --recursive +w "${dependency_dir}"

  patch_executable_files "${dependency_dir}"
  patch_wrapped_programs "${dependency_dir}"

  recursive_link "${dependency_dir}/bin" "${g_build_dir}/bin"
}

add_so_files_to_cache() {
  local -r directory=${1}

  while IFS= read -r so
  do
    g_so_location_cache["$(basename "${so}")"]="${so}"
  done < <(find "${directory}" -executable -a -type f -a -name "*.so*")
}

patch_executable_files() {
  local -r directory=${1}

  while IFS= read -r file
  do
    if is_elf "${file}"
    then
      patch_elf_file "${file}"
    elif is_script "${file}"
    then
      patch_script_file "${file}"
    else
      continue
    fi
  done < <(find "${directory}" -executable -a -type f)
}

# Undoes the patching of shebangs, as done by
# https://github.com/NixOS/nixpkgs/blob/e50c67ad7eefa8e77436fbd0366b69638b1c8713/pkgs/build-support/setup-hooks/patch-shebangs.sh
patch_script_file() {
  local -r file=${1}

  local old_interpreter_line=
  old_interpreter_line=$(head -1 "${file}" | tail -c+3)

  read -r old_interpreter args <<< "${old_interpreter_line}"

  case "${old_interpreter}" in
    /nix/store/*)
      local shell_name=
      shell_name=$(basename "${old_interpreter}")

      local temp=
      temp=$(mktemp)

      {
        if [[ -z "${args}" ]]
        then
          echo "#!/usr/bin/env ${shell_name}"
        else
          echo "#!/usr/bin/env -S ${shell_name} ${args}"
        fi

        tail -n +2 "${file}"
      } > "${temp}"

      # Make sure attributes and timestamps match the source file
      cp --attributes-only --preserve "${file}" "${temp}"

      mv "${temp}" "${file}"

      printf "Patched script '%s'.\n" "${file}"
      ;;
    *)
      ;;
  esac
}

patch_elf_file() {
  local -r file=${1}

  local file_dir=
  file_dir=$(dirname "${file}")

  local -a run_path=()
  local -A seen_paths=()

  if is_binary_executable "${1}"
  then
    patchelf --set-interpreter "${g_interpreter}" "${file}"
    printf "Patched interpreter in file '%s'.\n" "${file}"
  fi

  local target=
  local target_dir=
  local relative_path=

  while IFS= read -r needed
  do
    target=${g_so_location_cache["${needed}"]:-}

    if [[ -n "${target}" ]]
    then
      target_dir=$(dirname "${target}")
      relative_path=$(realpath "${target_dir}" --relative-to="${file_dir}")

      if [[ -v seen_paths[${relative_path}] ]]
      then
        continue
      fi

      run_path+=("\$ORIGIN/${relative_path}")

      # NOTE: shellcheck can't detect that we're using
      # the variable, hence the following ignore directive.
      #
      # shellcheck disable=SC2034
      seen_paths["${relative_path}"]=true
    fi
  done < <(patchelf --print-needed "${file}" 2>/dev/null)

  local run_path_s
  printf -v run_path_s ':%s' "${run_path[@]}"
  run_path_s=${run_path_s:1}

  if patchelf --set-rpath "${run_path_s}" "${file}"
  then
    patchelf --shrink-rpath "${file}"
    printf "Patched DT_RUNPATH in file '%s'.\n" "${file}"
  fi

  return
}

patch_wrapped_programs() {
  local -r directory=${1}

  while IFS= read -r file
  do
    patch_wrapped_program "${file}"
  done < <(find "${directory}" -executable -a -type f -a -name ".*-wrapped")
}

patch_wrapped_program() {
  local -r inner_path=${1}

  local inner_dir=
  inner_dir=$(dirname "${inner_path}")

  local inner_name=
  inner_name=$(basename "${inner_path}")

  local outer_name=
  # shellcheck disable=SC2001
  outer_name=$(sed 's/^\.\(.*\)-wrapped$/\1/' <<< "${inner_name}")

  local outer_path=${inner_dir}/${outer_name}

  local -a replace_expressions=()

  while IFS= read -r dependency_store_path
  do
    if ! has_dependency_been_processed "${dependency_store_path}"
    then
      printf "Wrapper %s depends on %s which isn't a dependency which has been processed\n" \
        "${outer_name}" \
        "${dependency_store_path}"

      continue
    fi

    local dependency_name=
    dependency_name=$(dependency_name "${dependency_store_path}")

    local dependency_dir=${g_build_dir}/lib/${dependency_name}

    local relative_path=
    relative_path=$(realpath "${dependency_dir}" --relative-to "${inner_dir}")

    # TODO: escape
    local this_replace_expression="s|${dependency_store_path}|\$(dirname \"\$(readlink --canonicalize \"\${BASH_SOURCE[0]}\")\")/${relative_path}|g"

    replace_expressions+=("${this_replace_expression}")

  done < <(grep -o "${g_store_path}/[^/]*" "${outer_path}")

  local replace_expression
  printf -v replace_expression ';%s' "${replace_expressions[@]}"
  replace_expression=${replace_expression:1}

  sed -i "${replace_expression}" "${outer_path}"

  # The nix wrapper script wraps the variable expression in
  # single quotes, change it to double quotes so we can
  # use variable expansion
  sed -i "s|='\([^\']*\)'|=\"\1\"|g" "${outer_path}"

  printf "Patching wrapped program %s with wrapper %s\n" "${inner_name}" "${outer_name}"
}

# ------------------------------------------------------------------------------
# Utility Functions
# ------------------------------------------------------------------------------
check_bash_version() {
  if (( BASH_VERSINFO[0] > 4 ))
  then
    return
  fi

  if (( BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] >= 4))
  then
    return
  fi

  eprintf "Bash needs to be version 4.4 or newer. The running version is %s\n" "${BASH_VERSION}"
  exit ${EXIT_BASH_TOO_OLD}
}

check_usage() {
  if [[ -z "${g_package}" ]]
  then
    eprintf "No package specified.\n"
    exit ${EXIT_USAGE}
  fi

  g_package=$(readlink --canonicalize "${g_package}")

  g_result_name=${g_result_name:-$(basename "${g_package}")}

  g_result_path=${PWD}/${g_result_name}

  if [[ -e "${g_result_path}" ]]
  then
    eprintf "The result '%s' already exists, remove it first." "${g_result_path}"
    exit ${EXIT_EXISTS}
  fi

  return ${EXIT_OK}
}

eprintf() {
  # shellcheck disable=SC2059
  printf "${@}" 1>&2
}

dependency_name() {
  local -r dependency=${1}

  # The right way to do this would be to ask the store for the pname, e.g.:
  #   dependency_name=$(nix-store --query --binding 'pname' "${dependency}")
  #
  # Sadly a) pname isn't always there, so one ends up using name instead and using
  # a glob match, and b) sometimes the derivation isn't there at all, so one
  # can't look up any attribute, so we're down to parsing the the path instead.
  printf "%s\n" "${dependency}" | sed 's/^[^-]*-\(.*\)$/\1/'
}

# This is taken from: https://github.com/NixOS/nixpkgs/blob/master/pkgs/build-support/setup-hooks/auto-patchelf.sh
is_binary_executable() {
  # For dynamically linked ELF files it would be enough to check just for the
  # INTERP section. However, we won't catch statically linked executables as
  # they only have an ELF type of EXEC but no INTERP.
  #
  # So what we do here is just check whether *either* the ELF type is EXEC
  # *or* there is an INTERP section. This also catches position-independent
  # executables, as they typically have an INTERP section but their ELF type
  # is DYN.
  #
  # NOTE: not using grep -q, because it can cause Broken pipe
  # shellcheck disable=SC2143
  [ -n "$(LANG=C readelf -h -l "$1" 2> /dev/null | grep '^ *Type: *EXEC\>\|^ *INTERP\>')" ]
}

# This is taken from https://github.com/NixOS/nixpkgs/blob/4fb8fab4d6949fd1f499d0e5a312f8827dadda98/pkgs/stdenv/generic/setup.sh#L185
is_elf() {
  local fn="$1"
  local fd
  local magic
  exec {fd}< "$fn"
  read -r -n 4 -u "$fd" magic
  exec {fd}<&-
  if [ "$magic" = $'\177ELF' ]; then return 0; else return 1; fi
}

# https://github.com/NixOS/nixpkgs/blob/4fb8fab4d6949fd1f499d0e5a312f8827dadda98/pkgs/stdenv/generic/setup.sh#L195
is_script() {
  local fn="$1"
  local fd
  local magic
  exec {fd}< "$fn"
  read -r -n 2 -u "$fd" magic
  exec {fd}<&-
  if [[ "$magic" =~ \#! ]]; then return 0; else return 1; fi
}

recursive_link() {
  local -r src_path=${1}
  local -r dst_path=${2}

  if [[ ! -d "${src_path}" ]];
  then
    return
  fi

  mkdir -p "${dst_path}"

  local relative_path=
  relative_path=$(realpath "${src_path}" --relative-to "${dst_path}")

  local file_name=

  for dir_entry in "${src_path}/"*
  do
    file_name=$(basename "${dir_entry}")

    if [[ -f "${dir_entry}" ]];
    then
      ln --symbolic --no-dereference "${relative_path}/${file_name}" "${dst_path}/${file_name}"
    elif [[ -d "${dir_entry}" ]];
    then
      recursiveLink "${dir_entry}" "${dst_path}/${file_name}"
    fi
  done
}

# ------------------------------------------------------------------------------
# Entry
# ------------------------------------------------------------------------------
main
